<?xml version="1.0"?>

<project name="oai-resource" default="build" basedir=".">

    <import file="../build.xml"/>
    <!-- ===================================================================
      -  init - initialization common to the framework module
      -  =================================================================== -->
    <target name="module-init" depends="global-init">
        <!-- Import Configuration File -->
        <property name="module.name"     value="oai-resource"/>
        <property file="${root.src.dir}/${module.name}/module.conf"/>
        <property name="module.root.dir"  value="${root.src.dir}/${module.name}"/>
        <!-- Extended module-specific properties -->
        <property name="module.version"  value="${module.version}"/>
        <property name="module.dist"  value="${module.root.dir}/dist"/>
        <property name="module.build" value="${module.root.dir}/tmp"/>
        <property name="module.doc" value="${module.root.dir}/doc"/>
        <property name="module.local.lib" value="${module.root.dir}/lib"/>
        <property name="module.lib" value="${module.root.dir}/${module.lib}"/>
        <property name="module.src" value="${module.root.dir}/${module.src}"/>
        <!-- Set global properties for this build -->
        <property name="final.name" value="${module.name}-${module.version}"/>
        <!-- Build - Classpath Information -->
        <fileset id="module.jars" dir="${module.lib}">
          <!-- Define includes here -->
            <include name="*.jar"/>
        </fileset>
        <path id="module.classpath">
            <pathelement location="${module.build}" />
            <fileset refid="module.jars"/>
        </path>
        
        <fileset id="local.jars" dir="${module.local.lib}">
            <include name="*.jar"/>
        </fileset>
        <path id="local.classpath">
            <pathelement location="${module.local.lib}" />
            <fileset refid="local.jars"/>
        </path>
        
    </target>

    <!-- Overrides parent definition of init -->
    <target name="init" depends="module-init"/>

    <target name="checkDependency" depends="init">
      <if>
        <not>
          <equals arg1="${module.depends.list}" arg2="" trim="true"/>
        </not>
      <then>
        <echo message="Compiling Modules"/>
        <foreach list="${module.depends.list}" delimiter=";" param="temp" target="compileDependency" inheritall="true"/>
      </then>
      </if>
    </target>

    <!-- Build Dependent Libraries - Called By build.xml -->
    <target name="compileDependency">
    <propertycopy name="target" from="${temp}" silent="true"/>
    <property name="d.module" value="${target}"/>
    <propertycopy name="target.version" from="${temp}.version" silent="true"/>
    <property name="d.module.version" value="${target.version}"/>
    <echo message="${d.module}"/>
    <echo message="${d.module.version}"/>
    <property name="d.module.dir" value="${root.src.dir}/${d.module}/dist"/>
     <if>
      <available file="${module.local.lib}/${d.module}-${d.module.version}.jar" type="file" property="local.file.present"/>
      <then>
       <echo message="${d.module} is available"/>
      </then>
      <else>
        <if>
          <available file="${d.module.dir}/${d.module}-${d.module.version}.jar" type="file" property="local.file.present"/>
           <then>
             <echo message="${d.module.dir}/${d.module}-${d.module.version}.jar is available"/>
             <copy file="${d.module.dir}/${d.module}-${d.module.version}.jar" todir="${module.local.lib}"/>
           </then>
           <else>
             <echo message="Building Depenent Module"/>
             <ant dir="${root.src.dir}/${d.module}" target="build" inheritAll="false"/>
             <copy file="${d.module.dir}/${d.module}-${d.module.version}.jar" todir="${module.local.lib}"/>
           </else>
        </if> 
      </else>
     </if> 
    </target>

    <!-- Compile This Module -->
    <target name="compile" depends="checkDependency">
      <mkdir dir="${module.build}"/>
      <!-- Compilation Units -->
      <javac destdir="${module.build}"
             debug="${compile.debug}"
             deprecation="${compile.deprecation}"
             optimize="${compile.optimize}"
             srcdir="${module.src}/gov/lanl/oai/resource">
        <classpath refid="module.classpath" />
        <classpath refid="local.classpath" />
        <include name="**/*.java"/>
        <exclude name="**/*Test.java"/>
      </javac>
      <javac destdir="${module.build}"
             debug="${compile.debug}"
             deprecation="${compile.deprecation}"
             optimize="${compile.optimize}"
             srcdir="${module.src}/gov/lanl/util">
        <classpath refid="module.classpath" />
        <classpath refid="local.classpath" />
        <include name="DateUtil.java"/>
        <include name="FileUtils.java"/>
        <include name="MimeTypeMapper.java"/>
        <include name="oai/**/*.java"/>
        <include name="uuid/*.java"/>
        <include name="csv/*.java"/>
        <exclude name="**/*Test.java"/>
      </javac>
    </target>
    
    <!-- Build This Project - Generate JAR / TAR / WAR Archives -->
    <target name="build" depends="compile">
      <mkdir dir="${module.dist}"/>
      <jar jarfile="${module.dist}/${final.name}.jar" basedir="${module.build}"/>
      <tar destfile="${module.dist}/${final.name}.tar.gz" compression="gzip">
        <!-- Copy project components into archive -->
        <tarfileset prefix="${module.name}" dir="${module.root.dir}">
          <include name="README"/>
          <include name="build.xml"/>
          <include name="build-standalone.xml"/>
          <include name="module.conf"/>
          <include name="module-dist.conf"/>
          <include name="etc/**"/>
          <include name="bin/**"/>
          <include name="lib/*.jar"/>
          <exclude name="etc/**/aps/**"/>
        </tarfileset>
        <!-- Copy Generated jar file into archive -->
        <tarfileset prefix="${module.name}/lib" dir="${module.dist}" includes="${final.name}.jar"/>
        <!-- Copy required library files into archive -->
        <tarfileset prefix="${module.name}/lib" dir="${module.lib}">
        <!-- Define includes here -->
          <include name="ant-contrib.jar"/>
          <include name="ANT-CONTRIB.LICENSE"/>           
          <include name="xercesImpl.jar"/>
          <include name="XERCESIMPL.LICENSE"/>
          <include name="oaicat.jar"/>
          <include name="OAICAT.LICENSE"/>
          <include name="xmlsec-gov.jar" />
          <include name="XMLSEC.LICENSE"/>
          <include name="oaiharvester-2.9.jar"/>
          <include name="OAIHARVESTER.LICENSE"/>
          <include name="xalan.jar"/>
          <include name="XALAN.LICENSE"/>
          <include name="xmlParserAPIs.jar"/>
          <include name="commons-logging.jar"/>
          <include name="COMMONS-LOGGING.LICENSE"/>
          <include name="heritrix-1.4.0.jar" />
          <include name="HERITRIX.LICENSE"/>
          <include name="mg4j-0.9.1.jar" />
          <include name="MG4J.LICENSE"/>
          <include name="log4j-1.2.8.jar" />
          <include name="LOG4J.LICENSE"/>
          <include name="xpp3-1.1.3.4.C.jar"/>
          <include name="XPP3.LICENSE"/>
        </tarfileset>
        <!-- Copy source files into archive -->
        <tarfileset prefix="${module.name}/src/gov/lanl/oai/resource" dir="${module.src}/gov/lanl/oai/resource" excludes="CVS">
          <include name="**/*.java"/>
          <exclude name="**/*Test.java"/>
        </tarfileset>
        <tarfileset prefix="${module.name}/src/gov/lanl/util" dir="${module.src}/gov/lanl/util" excludes="CVS">
          <include name="DateUtil.java"/>
          <include name="FileUtils.java"/>
          <include name="MimeTypeMapper.java"/>
          <include name="oai/**/*.java"/>
          <include name="uuid/*.java"/>
          <include name="csv/*.java"/>
          <exclude name="**/*Test.java"/>
        </tarfileset>
      </tar>
    </target>
    
    <!-- Distribute -->
    <target name="build-zip" depends="init">
      <mkdir dir="${module.dist}"/>
      <jar jarfile="${module.dist}/${final.name}.jar" basedir="${module.build}"/>
      <zip destfile="${module.dist}/${final.name}.zip">
        <!-- Copy project components into archive -->
        <zipfileset prefix="${module.name}" dir="${module.root.dir}">
          <include name="README"/>
          <include name="etc/**"/>
          <include name="bin/**"/>
          <include name="lib/*.jar"/>
          <exclude name="etc/**/aps/**"/>
        </zipfileset>
        <!-- Copy Generated jar file into archive -->
        <zipfileset prefix="${module.name}/lib" dir="${module.dist}" includes="${final.name}.jar"/>
        <!-- Copy required library files into archive -->
        <zipfileset prefix="${module.name}/lib" dir="${module.lib}">
        <!-- Define includes here -->
        <include name="ant-contrib.jar"/>
        <include name="ANT-CONTRIB.LICENSE"/>        
        <include name="xercesImpl.jar"/>
        <include name="XERCESIMPL.LICENSE"/>
        <include name="oaicat.jar"/>
        <include name="OAICAT.LICENSE"/>
        <include name="xmlsec-gov.jar" />
        <include name="XMLSEC.LICENSE"/>
        <include name="oaiharvester-2.9.jar"/>
        <include name="OAIHARVESTER.LICENSE"/>
        <include name="xalan.jar"/>
        <include name="XALAN.LICENSE"/>
        <include name="xmlParserAPIs.jar"/>
        <include name="commons-logging.jar"/>
        <include name="COMMONS-LOGGING.LICENSE"/>
        <include name="heritrix-1.4.0.jar" />
        <include name="HERITRIX.LICENSE"/>
        <include name="mg4j-0.9.1.jar" />
        <include name="MG4J.LICENSE"/>
        <include name="log4j-1.2.8.jar" />
        <include name="LOG4J.LICENSE"/>
        <include name="xpp3-1.1.3.4.C.jar"/>
        <include name="XPP3.LICENSE"/>
        </zipfileset>
      </zip>
    </target>

    <!-- Delete the ${build} and ${dist} directory trees -->
    <target name="clean" depends="checkRemoveDependentLib" description="Destroys all generated files and dirs." >
        <delete dir="${module.build}"/>
        <delete dir="${module.dist}"/>
        <delete dir="${module.doc}"/>
    </target>
    
    <!-- create javadoc -->
    <target name="javadoc" depends="init">
        <javadoc
             destdir="${module.doc}"
             author="true"
             version="true"
             use="true"
             windowtitle="OAI Resource API">
        
        <classpath refid="module.classpath" />
        <classpath refid="local.classpath" />
        <fileset dir="${module.src}/gov/lanl/util">
          <include name="DateUtil.java"/>
          <include name="FileUtils.java"/>
          <include name="MimeTypeMapper.java"/>
          <include name="oai/**/*.java"/>
          <include name="uuid/*.java"/>
          <include name="csv/*.java"/>
          <exclude name="**/*Test.java"/>
        </fileset>
        <fileset dir="${module.src}/gov/lanl/oai/resource">
          <include name="**/*.java"/>
          <exclude name="**/*Test.java"/>
        </fileset>   
        <doctitle><![CDATA[<h1>OAI Resource API</h1>]]></doctitle>
        <bottom><![CDATA[<i>Copyright &#169; 2006 LANL All Rights Reserved.</i>]]></bottom>
      </javadoc>
    </target>


    <!-- Check to delete Dependent Libraries -->
    <target name="checkRemoveDependentLib" depends="init">
      <if>
        <not>
          <equals arg1="${module.depends.list}" arg2="" trim="true"/>
        </not>
      <then>
        <foreach list="${module.depends.list}" delimiter=";" param="temp" target="removeDependentLib" inheritall="true"/>
      </then>
      </if>
    </target>

   <!-- Delete Dependent Libraries -->
    <target name="removeDependentLib">
    <propertycopy name="target" from="${temp}" silent="true"/>
    <property name="d.module" value="${target}"/>
    <propertycopy name="target.version" from="${temp}.version" silent="true"/>
    <property name="d.module.version" value="${target.version}"/>
    <echo message="${d.module}"/>
    <echo message="${d.module.version}"/>
     <if>
      <available file="${module.local.lib}/${d.module}-${d.module.version}.jar" type="file" property="local.file.present"/>
      <then>
       <delete file="${module.local.lib}/${d.module}-${d.module.version}.jar"/>
      </then>
     </if> 
    </target>

</project>
