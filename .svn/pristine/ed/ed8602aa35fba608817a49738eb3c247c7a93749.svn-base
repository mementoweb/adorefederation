/*
 * Copyright (c) 2007  Los Alamos National Security, LLC.
 *
 * Los Alamos National Laboratory
 * Research Library
 * Digital Library Research & Prototyping Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 * 
 */

package gov.lanl.xmltape;

import java.io.*;
import java.util.zip.*;
import java.util.Vector;
import java.util.Iterator;
import java.util.ArrayList;

import gov.lanl.util.uuid.*;

/**
 * XMLTape Writer, which implements TapeWriterInterface, 
 */

public class TapeWriter implements TapeConstants, TapeWriterInterface {
    private File _tapedir;

    private String _prefix;

    private boolean _compress;

    private int _maxsize;

    private ArrayList _adminlist;

    private java.util.Vector _filelist;

    private SingleTapeWriter _curr;

    /**
     * Constructor using default file prefix, "xmltape" 
     * @param tapedir
     *            File object specifying location of target XMLTape
     */
    public TapeWriter(java.io.File tapedir) {
        this(tapedir, "xmltape", true, MAX_TAPE_SIZE);
    }

    /**
     * Constructor using custom file prefix 
     * @param tapedir
     *            File object specifying location of target XMLTape
     * @param prefix
     *            Prefix to be appended to file name       
     */
    public TapeWriter(java.io.File tapedir, java.lang.String prefix) {
        this(tapedir, prefix, true, MAX_TAPE_SIZE);
    }

    /**
     * Constructor using custom file prefix and compression option
     * @param tapedir
     *            File object specifying location of target XMLTape
     * @param prefix
     *            Prefix to be appended to file name
     * @param compress
     *            Boolean indicating whether compression should be used          
     */
    public TapeWriter(java.io.File tapedir, java.lang.String prefix,
            boolean compress) {
        this(tapedir, prefix, compress, MAX_TAPE_SIZE);
    }

    /**
     * Constructor using custom file prefix, compression, maxsize options
     * @param tapedir
     *            File object specifying location of target XMLTape
     * @param prefix
     *            Prefix to be appended to file name
     * @param compress
     *            boolean indicating whether compression should be used
     * @param maxsize
     *            int value denoting max size of XMLTape in bytes           
     */
    public TapeWriter(java.io.File tapedir, String prefix, boolean compress,
            int maxsize) {
        _tapedir = tapedir;
        _prefix = prefix;
        _compress = compress;
        _maxsize = maxsize;
        _filelist = new Vector();
        _adminlist = new ArrayList();
    }

    /**
     * Close a tape file
     */
    public void close() throws java.io.IOException {
        if (_curr != null)
            _curr.close();
    }

    /**
     * Gets directory to which XMLTape is stored
     * @return
     *        Absolute path to directory containing XMLTape
     */
    public File getDir() {
        return _tapedir;
    }

    /**
     * Gets the max size of XMLTape in bytes
     * @return
     *        int of max bytes allowed in XMLTape
     */
    public int getMaxSize() {
        return _maxsize;
    }

    /**
     * Is the XMLTape file compressed?
     * @return
     *        boolean indicating whether the file is compressed
     */
    public boolean isCompress() {
        return _compress;
    }

    /**
     * Add admin section to all XMLTapes generated by this writer
     * 
     * @param admin
     *            an xml fragment for admin information
     */
    public void addAdmin(String admin) {
        _adminlist.add(admin);
    }

    /**
     * Write TapeRecord to XMLTape; XMLTape is created when the first
     * valid TapeRecord is written.
     */
    public synchronized void write(TapeRecord taperecord)
            throws java.io.IOException {
        boolean newtape = false;
        if (_curr == null)
            newtape = true;
        else if (_curr.getSize() >= _maxsize) {
            _curr.close();
            newtape = true;
        } else
            newtape = false;
        String filename;
        String uuid = UUIDFactory.generateUUID().getNudeId();
        if (newtape) {
            if (_compress) {
                filename = _prefix + "_"    + uuid + ".xml.gz";
                _filelist.add(filename);
                GZIPOutputStream gzipstream = new GZIPOutputStream(
                        new FileOutputStream(new File(_tapedir, filename)));
                BufferedWriter writer = new BufferedWriter(
                        new OutputStreamWriter(gzipstream));
                _curr = new SingleTapeWriter(writer);
            } else {
                filename = _prefix + "_" + uuid + ".xml";
                _filelist.add(filename);
                BufferedWriter writer = new BufferedWriter(
                        new OutputStreamWriter(new FileOutputStream(new File(
                                _tapedir, filename)), "UTF-8"));
                _curr = new SingleTapeWriter(writer);

            }
            _curr.setXmlTapeID(TapeProperties.getLocalXmlTapePrefix() + _prefix + "_" + uuid);
            _curr.writeDefaultAdmin();
            for (Iterator it = _adminlist.iterator(); it.hasNext();) {
                _curr.writeTapeAdmin((String) (it.next()));
            }

        }

        _curr.writeRecord(taperecord);

    }

    /**
     * Gets a vector of XMLTape files processed with this TapeWriter instance
     * @return
     *      Vector of processed files
     */
    public Vector getFilelist() {
        return _filelist;
    }

}
